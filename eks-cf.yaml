AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS EKS Cluster with VPC, Node Groups, Security Groups, and EBS CSI Driver"

Parameters:
  ClusterName:
    Type: String
    Default: "my-eks-cluster"
    Description: "The name of the EKS cluster"

  ClusterVersion:
    Type: String
    Default: "1.25"
    Description: "EKS Cluster Version"

  NodeInstanceType:
    Type: String
    Default: "t3a.medium"
    Description: "EC2 instance type for worker nodes"

  NodeMinSize:
    Type: Number
    Default: 1
    Description: "Minimum number of worker nodes"

  NodeMaxSize:
    Type: Number
    Default: 5
    Description: "Maximum number of worker nodes"

  NodeDesiredSize:
    Type: Number
    Default: 2
    Description: "Desired number of worker nodes"

Resources:

  # ---- VPC ----
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  # ---- Public Subnets ----
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.5.0/24"
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.6.0/24"
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true

  # ---- Private Subnets ----
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false

  # ---- EKS Security Group ----
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EKS Cluster Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"

  # ---- IAM Role for EKS ----
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "eks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"

  # ---- EKS Cluster ----
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        SecurityGroupIds:
          - !Ref EKSSecurityGroup

  # ---- IAM Role for Node Group ----
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"

  # ---- EKS Managed Node Group ----
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: "consul"
      NodeRole: !GetAtt NodeInstanceRole.Arn
      ScalingConfig:
        MinSize: !Ref NodeMinSize
        MaxSize: !Ref NodeMaxSize
        DesiredSize: !Ref NodeDesiredSize
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      InstanceTypes:
        - !Ref NodeInstanceType

  # ---- IAM Role for EBS CSI ----
  EBSCSIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.${AWS::Region}.amazonaws.com/id/${EKSCluster}"
            Action: "sts:AssumeRoleWithWebIdentity"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      Tags:
        - Key: Name
          Value: "AmazonEKSTFEBSCSIRole"

  # ---- EBS CSI Add-on ----
  EBSCSIAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: "aws-ebs-csi-driver"
      ServiceAccountRoleArn: !GetAtt EBSCSIRole.Arn

Outputs:
  ClusterName:
    Description: "EKS Cluster Name"
    Value: !Ref EKSCluster

  ClusterEndpoint:
    Description: "EKS Cluster API Endpoint"
    Value: !GetAtt EKSCluster.Endpoint

  ClusterRoleArn:
    Description: "IAM Role for EKS Cluster"
    Value: !GetAtt EKSClusterRole.Arn

  NodeRoleArn:
    Description: "IAM Role for Worker Nodes"
    Value: !GetAtt NodeInstanceRole.Arn

  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC

  PublicSubnets:
    Description: "Public Subnet IDs"
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]

  PrivateSubnets:
    Description: "Private Subnet IDs"
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]]
