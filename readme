*GCP*
*For Bash, the order of creation and deletion is IMPORTANT ! 
# Authenticate using GCLOUD_SERVICE_KEY.
 a) Create a new Service Account and grant the permissions
   -Service Account User
   -Kubernetes Engine Admin
   -Compute Network Admin
   -Viewer

# After create SA from GCP Console and downloaded the json, convert to base64 and upload to git secrets or hashivault
cat sa.json | base64
After that, you can start to deploy the gke-bash.sh

# --------------THIS SESSION FOR JUMPHOST IN GCP, so only JUMPHOST can manage GKE----------------
# Create key pair from your laptop and upload to GCP if u have not done so (this is for access jumphost later)
ssh-keygen -t rsa -b 2048 -f ~/.ssh/jl-hashi
Copy pub key to GCP SSH Keys under Metadata
SSH to jump host (username will be your laptop login, can be seen in the pub key last row)
# Install kubectl and GCP AUth Plugin to auth to GKE
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
gcloud components update
sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
# Add k8s config to local jumphost
gcloud container clusters get-credentials jl-gke-sg --zone=asia-southeast1-a
# Test the kubectl
kubectl get nodes
# Deploy PG Pod and SVC
kubectl apply -f https://raw.githubusercontent.com/happygolucky/hashi/main/acme-db-deploy.yaml
# Create role and grant permission
kubectl exec -it $(kubectl get pod -l app=acme-postgres -o jsonpath="{.items[0].metadata.name}") -- \
  psql -U jawn-dba -c "CREATE ROLE \"jawn-dba-role\" NOINHERIT;"
kubectl exec -it $(kubectl get pod -l app=acme-postgres -o jsonpath="{.items[0].metadata.name}") -- \
  psql -U jawn-dba -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"jawn-dba-role\";"
# check the existing roles
kubectl exec -it $(kubectl get pod -l app=acme-postgres -o jsonpath="{.items[0].metadata.name}") -- psql -U jawn-dba -c "\du"

# Deploy a pod just for vault in ubuntu
kubectl apply -f https://raw.githubusercontent.com/happygoIucky/hashi/main/acme-vault-deploy.yaml

# access to vault to perform
# Once bash into vault pod
# Export env variable (ensure to use your value)
    export VAULT_ADDR='http://10.224.0.9:8200'
    export POSTGRES_URL=10.224.0.7:5432
    export VAULT_CACERT='/tmp/vault-tls1221097004/vault-ca.pem'

# ensure your acme-vault-policy.hcl is already existed (should exist since we have already init it in deployment)
- Apply the vault policy. "vault policy write admin acme-vault-policy.hcl"
- Check the policy "vault policy list" , "vault policy read admin"

#Configure the database secrets engine

vault secrets enable database
vault write database/config/postgres \
     plugin_name=postgresql-database-plugin \
     connection_url="postgresql://{{username}}:{{password}}@$POSTGRES_URL/postgres?sslmode=disable" \
     allowed_roles=readonly \
     username="jawn-dba" \
     password="P@ssw0rd123$"

# crete a role
# Ensure your acme-readonly.sql is already existed (should exist since we have already init it in deployment)
vault write database/roles/readonly \
      db_name=postgres \
      creation_statements=@acme-readonly.sql \
      default_ttl=1h \
      max_ttl=24h


#list all the users
kubectl exec -it $(kubectl get pod -l app=acme-postgres -o jsonpath="{.items[0].metadata.name}") -- \
  psql -U jawn-dba -c "\du"

# Connect to the PostgreSQL database and list all database users with expiry of token
kubectl exec -it $(kubectl get pod -l app=acme-postgres -o jsonpath="{.items[0].metadata.name}") -- psql -U jawn-dba -c "SET TIME ZONE 'Asia/Singapore'; SELECT usename, valuntil FROM pg_user;"

# now test the db user with the token to see if its validate. if its expired, you will receive error
kubectl exec -it $(kubectl get pod -l app=acme-postgres -o jsonpath="{.items[0].metadata.name}") -- \
  psql -U v-token-readonly-kvajD3PPvSkHQG5odCWb-1741768312 -d postgres -W
  








